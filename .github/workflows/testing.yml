name: Testing

# Pull or build component images and run one or more test cases
# for pull requests into the main branch

on:
  push:
    branches:
      - main
      - feature**
      - bugfix**

  pull_request:
    types: [opened, reopened, synchronize]

  workflow_dispatch:
    inputs:
      force_build_base:
        description: "Build Base Image"
        default: false
        type: boolean
      force_build_wps_wrf:
        description: "Build WPS/WRF Image"
        default: false
        type: boolean
      force_build_gsi:
        description: "Build GSI Image"
        default: false
        type: boolean
      force_build_upp:
        description: "Build UPP Image"
        default: false
        type: boolean
      force_build_python:
        description: "Build Python Image"
        default: false
        type: boolean
      force_build_met:
        description: "Build MET Image"
        default: false
        type: boolean
      force_build_metviewer:
        description: "Build METviewer Image"
        default: false
        type: boolean
      force_run_sandy:
        description: "Run Sandy Case"
        default: true
        type: boolean

jobs:

  event_info:
    name: "Trigger: ${{ github.event_name }} from ${{ github.actor }}"
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub values for reference
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

  job_control:
    name: Determine which jobs to run
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.job_status.outputs.branch_name }}
      build_base: ${{ steps.job_status.outputs.build_base }}
      build_wps_wrf: ${{ steps.job_status.outputs.build_wps_wrf }}
      build_gsi: ${{ steps.job_status.outputs.build_gsi }}
      build_upp: ${{ steps.job_status.outputs.build_upp }}
      build_python: ${{ steps.job_status.outputs.build_python }}
      build_met: ${{ steps.job_status.outputs.build_met }}
      build_metviewer: ${{ steps.job_status.outputs.build_metviewer }}
      run_sandy: ${{ steps.job_status.outputs.run_sandy }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set job controls
        id: job_status
        run: .github/jobs/set_job_controls.sh
        env:
          commit_msg: ${{ github.event.head_commit.message }}
          reference_sha: ${{ github.event.before }}
          force_build_base: ${{ github.event.inputs.force_build_base }}
          force_build_wps_wrf: ${{ github.event.inputs.force_build_wps_wrf }}
          force_build_gsi: ${{ github.event.inputs.force_build_gsi }}
          force_build_upp: ${{ github.event.inputs.force_build_upp }}
          force_build_python: ${{ github.event.inputs.force_build_python }}
          force_build_met: ${{ github.event.inputs.force_build_met }}
          force_build_metviewer: ${{ github.event.inputs.force_build_metviewer }}
          force_run_sandy: ${{ github.event.inputs.force_run_sandy }}
      - uses: actions/upload-artifact@v2
        with:
          name: job_control_status
          path: job_control_status

  build_wps_wrf:
    name: Build WPS/WRF Image
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/checkout@v2

      - name: Create directory to store logs
        run: mkdir -p ${RUNNER_WORKSPACE}/logs

      - name: Build and push the WPS/WRF Image, as needed
        run: .github/jobs/build_docker_image.sh wps_wrf wps_wrf wps_wrf
        env:
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BASE_IMAGE: "dtcenter/base_image:simple"
          BUILD_BASE: ${{ needs.job_control.outputs.build_base }}
          BUILD_IMAGE: ${{ needs.job_control.outputs.build_wps_wrf }}

      - name: Copy Docker build log into logs directory
        if: always()
        run: cp ${GITHUB_WORKSPACE}/docker_build_wps_wrf.log ${RUNNER_WORKSPACE}/logs/.

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  build_gsi:
    name: Build GSI Image
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/checkout@v2

      - name: Create directory to store logs
        run: mkdir -p ${RUNNER_WORKSPACE}/logs

      - name: Build and push the GSI Image, as needed
        run: .github/jobs/build_docker_image.sh gsi gsi gsi
        env:
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BASE_IMAGE: "dtcenter/base_image:latest"
          BUILD_BASE: ${{ needs.job_control.outputs.build_base }}
          BUILD_IMAGE: ${{ needs.job_control.outputs.build_gsi }}

      - name: Copy Docker build log into logs directory
        if: always()
        run: cp ${GITHUB_WORKSPACE}/docker_build_gsi.log ${RUNNER_WORKSPACE}/logs/.

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  build_upp:
    name: Build UPP Image
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/checkout@v2

      - name: Create directory to store logs
        run: mkdir -p ${RUNNER_WORKSPACE}/logs

      - name: Build and push the UPP Image, as needed
        run: .github/jobs/build_docker_image.sh upp upp upp
        env:
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BASE_IMAGE: "dtcenter/base_image:latest"
          BUILD_BASE: ${{ needs.job_control.outputs.build_base }}
          BUILD_IMAGE: ${{ needs.job_control.outputs.build_upp }}

      - name: Copy Docker build log into logs directory
        if: always()
        run: cp ${GITHUB_WORKSPACE}/docker_build_upp.log ${RUNNER_WORKSPACE}/logs/.

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  build_python:
    name: Build Python Image
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/checkout@v2

      - name: Create directory to store logs
        run: mkdir -p ${RUNNER_WORKSPACE}/logs

      - name: Build and push the Python Image, as needed
        run: .github/jobs/build_docker_image.sh python python python
        env:
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BASE_IMAGE: "dtcenter/base_image:simple"
          BUILD_BASE: ${{ needs.job_control.outputs.build_base }}
          BUILD_IMAGE: ${{ needs.job_control.outputs.build_python }}

      - name: Copy Docker build log into logs directory
        if: always()
        run: cp ${GITHUB_WORKSPACE}/docker_build_python.log ${RUNNER_WORKSPACE}/logs/.

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  build_met:
    name: Build MET Image
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/checkout@v2

      - name: Create directory to store logs
        run: mkdir -p ${RUNNER_WORKSPACE}/logs

      - name: Build and push the MET Image, as needed
        run: .github/jobs/build_docker_image.sh met nwp-container-met met/MET
        env:
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BASE_IMAGE: "dtcenter/base_image:latest"
          BUILD_BASE: ${{ needs.job_control.outputs.build_base }}
          BUILD_IMAGE: ${{ needs.job_control.outputs.build_met }}

      - name: Copy Docker build log into logs directory
        if: always()
        run: cp ${GITHUB_WORKSPACE}/docker_build_met.log ${RUNNER_WORKSPACE}/logs/.

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  build_metviewer:
    name: Build METviewer Image
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/checkout@v2

      - name: Create directory to store logs
        run: mkdir -p ${RUNNER_WORKSPACE}/logs

      - name: Build and push the METviewer Image, as needed
        run: .github/jobs/build_docker_image.sh metviewer nwp-container-metviewer metviewer/METviewer
        env:
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BASE_IMAGE: "dtcenter/base_image:simple"
          BUILD_BASE: ${{ needs.job_control.outputs.build_base }}
          BUILD_IMAGE: ${{ needs.job_control.outputs.build_metviewer }}

      - name: Copy Docker build log into logs directory
        if: always()
        run: cp ${GITHUB_WORKSPACE}/docker_build_metviewer.log ${RUNNER_WORKSPACE}/logs/.

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  sandy:
    name: Run Sandy
    runs-on: ubuntu-latest
    needs: [job_control, build_wps_wrf, build_gsi, build_upp, build_python, build_met, build_metviewer]
    if: ${{ needs.job_control.outputs.run_sandy == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Create directory to store logs
        run: mkdir -p ${RUNNER_WORKSPACE}/logs

      - name: Create directory to store output
        run: mkdir -p ${RUNNER_WORKSPACE}/output

      - name: Run the Sandy case
        run: .github/jobs/run_case.sh sandy
        env:
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          BUILD_WPS_WRF: ${{ needs.job_control.outputs.build_wps_wrf }}
          BUILD_GSI: ${{ needs.job_control.outputs.build_gsi }}
          BUILD_UPP: ${{ needs.job_control.outputs.build_upp }}
          BUILD_PYTHON: ${{ needs.job_control.outputs.build_python }}
          BUILD_MET: ${{ needs.job_control.outputs.build_met }}
          BUILD_METVIEWER: ${{ needs.job_control.outputs.build_metviewer }}

      - name: Copy the Sandy log into the logs directory
        if: always()
        run: cp ${GITHUB_WORKSPACE}/run_sandy.log ${RUNNER_WORKSPACE}/logs/.

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

      - name: Copy run Sandy output into the output directory
        if: always()
        run: cp -r ${GITHUB_WORKSPACE}/sandy/pythonprd ${GITHUB_WORKSPACE}/sandy/metprd ${GITHUB_WORKSPACE}/sandy/metviewer ${RUNNER_WORKSPACE}/output/.

      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: sandy
          path: ${{ runner.workspace }}/output
